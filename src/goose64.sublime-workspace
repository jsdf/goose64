{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"total",
				"totalUpdates\tabc"
			],
			[
				"ed64io",
				"ed64io.h\t(main.c)"
			],
			[
				"seq",
				"seqPlaying\tabc"
			],
			[
				"Honk",
				"Honk1Sound\tabc"
			],
			[
				"Hon",
				"Honk5Sound"
			],
			[
				"NON",
				"NoneSound\t(sound.h)"
			],
			[
				"ed",
				"ed64PrintfSync2\tabc"
			],
			[
				"end",
				"endif\t(Makefile)"
			],
			[
				"got",
				"gotFirstInterrupt\tabc"
			],
			[
				"LOG",
				"LOG_SAMPLING_PROFILE\tabc"
			],
			[
				"sampl",
				"sampling_profiler.h\t(stage00.c)"
			],
			[
				"thread",
				"threadToProfile\tabc"
			],
			[
				"MAX",
				"MAX_PROFILE_SIZE\tabc"
			],
			[
				"error",
				"errorDesc\tabc"
			],
			[
				"print",
				"printf\tprintf …"
			],
			[
				"ed64",
				"ed64Printf\t(constants.h)"
			],
			[
				"RENDERER",
				"RENDERER_PAINTERS_ALGORITHM\tabc"
			],
			[
				"RENDER",
				"RENDERER_FRUSTUM_CULLING\tabc"
			],
			[
				"Vec3d_",
				"Vec3d_set\t(vec3d.c)"
			],
			[
				"stage",
				"stage00\t(main.c)"
			],
			[
				"debug",
				"debugPrintf\tabc"
			],
			[
				"OS",
				"OSThread\tabc"
			],
			[
				"ed64Prin",
				"ed64PrintStackTrace\t(ed64io_fault.c)"
			],
			[
				"Render",
				"RendererSortDistance\tabc"
			],
			[
				"ModelTyp",
				"ModelTypeStrings\t(stage00.c)"
			],
			[
				"visi",
				"visibleObjectsCount\tabc"
			],
			[
				"zW",
				"zWriteObjectsCount\tabc"
			],
			[
				"Game",
				"GameObject\tabc"
			],
			[
				"Renderer",
				"Renderer_isZWriteGameObject\tabc"
			],
			[
				"Gam",
				"GameObject\tabc"
			],
			[
				"intersec",
				"intersect\t(collision.c)"
			],
			[
				"High",
				"HIGH_RESOLUTION_HALF_Y\tabc"
			],
			[
				"snd",
				"snd_no\tabc"
			],
			[
				"SCR",
				"SCREEN_HT\tabc"
			],
			[
				"SCRE",
				"SCREEN_Y\t(graphic.h)"
			],
			[
				"SCREE",
				"SCREEN_X\t(graphic.h)"
			],
			[
				"SC",
				"SCREEN_X\t(graphic.h)"
			],
			[
				"SCREN",
				"SCREEN_WD\tabc"
			],
			[
				"visib",
				"visibleObjDistance\tabc"
			],
			[
				"view",
				"viewport\tabc"
			],
			[
				"proj",
				"projection\tabc"
			],
			[
				"ti",
				"tick\t(player.c)"
			],
			[
				"NoneS",
				"NoneSprite\t(animation.c)"
			],
			[
				"Mtx",
				"MtxF\tabc"
			],
			[
				"Mt",
				"MtxF\tabc"
			],
			[
				"sprite",
				"spriteAttachment\t(animation.h)"
			],
			[
				"spr",
				"spriteAttachment\t(animation.h)"
			],
			[
				"spri",
				"spriteType\tabc"
			],
			[
				"Spr",
				"Sprite_honk1spr\t(honk1spr.h)"
			],
			[
				"n64",
				"n64audio.c\tabc"
			],
			[
				"inc",
				"inc\t#include \"…\""
			],
			[
				"E",
				"EXTERN_SEGMENT\tabc"
			],
			[
				"objTrans",
				"objTransforms\t(graphic.h)"
			],
			[
				"Garden",
				"GardenerCharacterModel\t(game.c)"
			],
			[
				"debu",
				"debugPrintf\tabc"
			],
			[
				"HIGH",
				"HIGH_RESOLUTION_OPTS\t(renderer.c)"
			],
			[
				"SCREEN",
				"SCREEN_WD\tabc"
			],
			[
				"Chara",
				"GardenerCharacterModel"
			],
			[
				"dis",
				"distance\t(renderer.c)"
			],
			[
				"ob",
				"obj\tabc"
			],
			[
				"Z",
				"ZBUFFER_ADDR\t(graphic.h)"
			],
			[
				"centr",
				"centroidOffset\tabc"
			],
			[
				"selec",
				"selectObjectAtScreenPos\tabc"
			],
			[
				"draw",
				"drawMarker\tabc"
			],
			[
				"las",
				"lastProjection\tabc"
			],
			[
				"enable",
				"enableLighting\tabc"
			],
			[
				"drawY",
				"drawRaycastLine\tabc"
			],
			[
				"Game_ge",
				"Game_getObjRadius\t(game.c)"
			],
			[
				"glPop",
				"glPopMatrix\tabc"
			],
			[
				"Vec",
				"Vec3d\tabc"
			],
			[
				"res",
				"result\tabc"
			],
			[
				"clo",
				"closestObjHit\tabc"
			],
			[
				"close",
				"closestObjHitDist\tabc"
			],
			[
				"Game_get",
				"Game_getIntersectingObjectID\t(glgoose.cpp)"
			],
			[
				"exi",
				"exitCode\tabc"
			],
			[
				"bone",
				"boneIndex\tabc"
			],
			[
				"bon",
				"boneIdx\tabc"
			],
			[
				"modeltype",
				"ModelTypeStrings"
			],
			[
				"flor",
				"floorHeight\tabc"
			],
			[
				"floor",
				"floorHeight\tabc"
			],
			[
				"Model",
				"ModelTypeStrings\tabc"
			],
			[
				"char",
				"characterrig\t(characterrig.h)"
			],
			[
				"character_anim",
				"character_anim_data\t(character_anim.h)"
			],
			[
				"Anim",
				"AnimationFrame\tabc"
			],
			[
				"MAXME",
				"MAX_ANIM_MESH_PARTS\t(animation.h)"
			],
			[
				"chrac",
				"characterhand_r_characterhand_rmesh\t(character_anim.h)"
			],
			[
				"mesh",
				"meshPart\tabc"
			],
			[
				"anims",
				"animStateInt\tabc"
			],
			[
				"blen",
				"blender_bone_name\tabc"
			],
			[
				"GOOSE",
				"GOOSE_WALK_SPEED_RATIO\tabc"
			],
			[
				"Character_ang",
				"Character_topDownAngleMagToObj\tabc"
			],
			[
				"pos",
				"position\tabc"
			],
			[
				"angle",
				"angleToPlayer\tabc"
			],
			[
				"glp",
				"glPopAttrib\tabc"
			],
			[
				"Bu",
				"BushModel\tabc"
			],
			[
				"_",
				"__N64__\tabc"
			],
			[
				"phs",
				"physBody\t(player.c)"
			],
			[
				"USE",
				"USE_PHYSICS_MOVEMENT\t(player.c)"
			],
			[
				"Phys",
				"PhysBody\tabc"
			],
			[
				"pla",
				"playerMovementScaled\tabc"
			],
			[
				"phy",
				"physBody\tabc"
			],
			[
				"items",
				"itemsCount\tabc"
			],
			[
				"non",
				"nonIntegralVelocity\tabc"
			],
			[
				"ph",
				"physBody\tabc"
			],
			[
				"phys",
				"physicsBodies\tabc"
			],
			[
				"NUM_",
				"NUM_ITEMS\tabc"
			],
			[
				"CHARAtr",
				"NUM_CHARACTERS"
			],
			[
				"model",
				"modelType\tabc"
			],
			[
				"GAme",
				"GameObject\tabc"
			],
			[
				"Goose",
				"GooseModel\tabc"
			],
			[
				"mode",
				"modelTypesProperties\tabc"
			],
			[
				"zoom",
				"zoomIn\t(input.c)"
			],
			[
				"Mode",
				"ModelType\t(glgoose.cpp)"
			],
			[
				"rot",
				"rotation\tabc"
			],
			[
				"Eul",
				"EulerDegrees_origin\t(rotation.h)"
			],
			[
				"Euler",
				"EulerDegrees\tabc"
			],
			[
				"hel",
				"heldItem\tabc"
			],
			[
				"item",
				"itemHolder\tabc"
			],
			[
				"goose_",
				"goosehead_gooseheadmesh\t(glgoose.cpp)"
			],
			[
				"Obj",
				"ObjModel\tabc"
			],
			[
				"off",
				"offset\tabc"
			],
			[
				"animDa",
				"animDataNumBones\tabc"
			],
			[
				"animfra",
				"animFrameB\tabc"
			],
			[
				"rad",
				"radiansA\tabc"
			],
			[
				"EulerDeg",
				"EulerDegrees_fromEuler\t(rotation.h)"
			],
			[
				"degTo",
				"degToRad\t(constants.h)"
			],
			[
				"Eu",
				"EulerDegrees\tabc"
			],
			[
				"qu",
				"quaternionA\tabc"
			]
		]
	},
	"buffers":
	[
		{
			"file": "stage00.c",
			"settings":
			{
				"buffer_size": 42519,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					21,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"",
					"AQAAAAAAAAABAAAAcwAAAAAAAAB+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAGFNAAAAAAAAYk0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYU0AAAAAAABhTQAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"",
					"AQAAAAAAAAABAAAAYk0AAAAAAABiTQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "goose64.sublime-project",
			"settings":
			{
				"buffer_size": 1686,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAgBgAAewogICJmb2xkZXJzIjogWwogICAgewogICAgICAicGF0aCI6ICIuIiwKICAgICAgImZvbGRlcl9leGNsdWRlX3BhdHRlcm5zIjogWyJpbWd1aSJdCiAgICB9CiAgXSwKICAic2V0dGluZ3MiOiB7CgogICAgIkNsYW5nRm9ybWF0IjogewogICAgICAic3R5bGUiOiAiQ2hyb21pdW0iLAogICAgICAiZm9ybWF0X29uX3NhdmUiOiB0cnVlLAogICAgfSwKIAoKICAgICJTdWJsaW1lTGludGVyLmxpbnRlcnMuY2xhbmcuYXJncyI6ICItREVENjQgLWZlcnJvci1saW1pdD0xMDAwMCAtV2FsbCAtZnN5bnRheC1vbmx5IC1mbm8tY2FyZXQtZGlhZ25vc3RpY3MgLXN0ZD1jODkgLXBlZGFudGljICAtV25vLW1pc3NpbmctYnJhY2VzIC1Xbm8tZGVwcmVjYXRlZC1kZWNsYXJhdGlvbnMgLVduby1sb25nLWxvbmcgLVduby1jb21tZW50IC1Xbm8tY29uc3RhbnQtY29udmVyc2lvbiAtRF9fTjY0X189MSAtRF9MQU5HVUFHRV9DPTEgLURfTUlQU19TWkxPTkc9NjQgLWluY2x1ZGUgdWx0cmE2NC5oIC1ERjNERVhfR0JJXzIgLWluY2x1ZGUgXCJQUi9nYmkuaFwiIiwKICAgICJTdWJsaW1lTGludGVyLmxpbnRlcnMuY2xhbmcuSSI6IFsKICAgICAgIiR7Zm9sZGVyfSIsCiAgICAgICIke2ZpbGVfcGF0aH0iLAogICAgICAiL1VzZXJzL2pmcmllbmQvLndpbmUvZHJpdmVfYy9uaW50ZW5kby9uNjRraXQvbnVzdGQvaW5jbHVkZSIsCiAgICAgICIvVXNlcnMvamZyaWVuZC8ud2luZS9kcml2ZV9jL25pbnRlbmRvL242NGtpdC9udXN5cy9pbmNsdWRlIiwKICAgICAgIi9Vc2Vycy9qZnJpZW5kLy53aW5lL2RyaXZlX2MvdWx0cmEvdXNyL2luY2x1ZGUiCiAgICBdLAogCiAgICAiU3VibGltZUxpbnRlci5saW50ZXJzLmNsYW5nKysuYXJncyI6ICAiLURFRDY0IC1mZXJyb3ItbGltaXQ9MTAwMDAgLVdhbGwgLWZzeW50YXgtb25seSAtZm5vLWNhcmV0LWRpYWdub3N0aWNzICAtV25vLW1pc3NpbmctYnJhY2VzIC1Xbm8tZGVwcmVjYXRlZC1kZWNsYXJhdGlvbnMgLVduby1sb25nLWxvbmcgLVduby1jb21tZW50IC1EX19ONjRfXz0xIC1EX0xBTkdVQUdFX0M9MSAtRF9NSVBTX1NaTE9ORz02NCAtaW5jbHVkZSB1bHRyYTY0LmggLURGM0RFWF9HQklfMiAtaW5jbHVkZSBcIlBSL2diaS5oXCIiLAogICAgIlN1YmxpbWVMaW50ZXIubGludGVycy5jbGFuZysrLkkiOiBbCiAgICAgICIke2ZvbGRlcn0iLAogICAgICAiJHtmaWxlX3BhdGh9IiwKICAgICAgIi9Vc2Vycy9qZnJpZW5kLy53aW5lL2RyaXZlX2MvbmludGVuZG8vbjY0a2l0L251c3RkL2luY2x1ZGUiLAogICAgICAiL1VzZXJzL2pmcmllbmQvLndpbmUvZHJpdmVfYy9uaW50ZW5kby9uNjRraXQvbnVzeXMvaW5jbHVkZSIsCiAgICAgICIvVXNlcnMvamZyaWVuZC8ud2luZS9kcml2ZV9jL3VsdHJhL3Vzci9pbmNsdWRlIgogICAgXQogIH0sCgogICJidWlsZF9zeXN0ZW1zIjogWwogICAgewogICAgICAibmFtZSI6ICJHTCBCdWlsZCIsCiAgICAgICJjbWQiOiBbIi4vZ2xidWlsZC5zaCJdCiAgICB9LAoKICAgIHsKICAgICAgIm5hbWUiOiAiRW11IEJ1aWxkIiwKICAgICAgImNtZCI6IFsiLi9idWlsZF9hbmRfcnVuLnNoIl0KICAgIH0KICBdCn0AAAAAAAAAAJYGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "GL Build",
	"build_system_choices":
	[
		[
			[
				[
					"Emu Build",
					""
				],
				[
					"GL Build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				]
			],
			[
				"GL Build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 271.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"error",
				"SublimeLinter: Show All Errors"
			],
			[
				"projec",
				"Project: Edit"
			],
			[
				"edit ",
				"Project: Edit"
			],
			[
				"pr",
				"Project: Edit"
			],
			[
				"ren",
				"File: Rename"
			],
			[
				"reb",
				"BracketHighlighter: Remove Brackets"
			],
			[
				"del",
				"File: Delete"
			],
			[
				"rena",
				"Rename File"
			],
			[
				"make",
				"Build With: Make"
			],
			[
				"bash",
				"Set Syntax: Bourne Again Shell (bash)"
			],
			[
				"path",
				"File: Copy Path"
			],
			[
				"de",
				"File: Delete"
			],
			[
				"makefi",
				"Set Syntax: Makefile"
			],
			[
				"move",
				"File: Move"
			],
			[
				"filename",
				"File: Copy Name"
			],
			[
				"uniq",
				"Permute Lines: Unique"
			],
			[
				"github",
				"GitHubinator"
			],
			[
				"gih",
				"GitHubinator"
			],
			[
				"clos",
				"File: Close All"
			],
			[
				"save",
				"File: Save All"
			],
			[
				"came",
				"Convert Case: camelCase"
			],
			[
				"jaas",
				"Set Syntax: JavaScript (Babel)"
			],
			[
				"babel",
				"Babel Transform"
			],
			[
				"enabl",
				"Package Control: Enable Package"
			],
			[
				"pack",
				"Package Control: List Packages"
			],
			[
				"upper",
				"Convert Case: Upper Case"
			],
			[
				"setting",
				"Preferences: Settings"
			],
			[
				"c++",
				"Set Syntax: C++"
			],
			[
				"low",
				"Convert Case: Lower Case"
			],
			[
				"prefere",
				"Preferences: Settings"
			],
			[
				"form",
				"Sublack: Format file"
			],
			[
				"packin",
				"Package Control: Install Package"
			],
			[
				"sort",
				"Sort Lines"
			],
			[
				"err",
				"SublimeLinter: Goto Error"
			],
			[
				"linter",
				"SublimeLinter: Goto Error"
			],
			[
				"jav",
				"Set Syntax: JavaScript"
			],
			[
				"jasv",
				"Set Syntax: JavaScript"
			],
			[
				"got",
				"SublimeLinter: Goto Error"
			],
			[
				"Dele",
				"File: Delete"
			],
			[
				"wrap",
				"Word Wrap: Toggle"
			],
			[
				"upp",
				"Convert Case: Upper Case"
			],
			[
				"wra",
				"Word Wrap: Toggle"
			],
			[
				"sor",
				"Sort Lines"
			],
			[
				"s",
				"Sort Lines"
			],
			[
				"uni",
				"Permute Lines: Unique"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"renam",
				"Rename File"
			],
			[
				"linterset",
				"Preferences: SublimeLinter Settings"
			],
			[
				"debug",
				"BracketHighlighter: Enable Debug Mode"
			],
			[
				"brak",
				"BracketHighlighter: Toggle Global Enable"
			],
			[
				"brakethigh",
				"BracketHighlighter: Toggle Global Enable"
			],
			[
				"match",
				"BracketHighlighter: Match Brackets (ignore threshold)"
			],
			[
				"cam",
				"Convert Case: camelCase"
			],
			[
				"scame",
				"Convert Case: camelCase"
			],
			[
				"dele",
				"File: Delete"
			],
			[
				"pyth",
				"Set Syntax: Python"
			],
			[
				"bui",
				"Build With: Emu Build"
			],
			[
				"build",
				"Build With: Emu Build"
			],
			[
				"javc",
				"Set Syntax: JavaScript"
			],
			[
				"synbash",
				"Set Syntax: Bourne Again Shell (bash)"
			],
			[
				"sync",
				"Set Syntax: C"
			],
			[
				"preferlint",
				"Preferences: SublimeLinter Settings"
			],
			[
				"pro",
				"Project: Edit"
			],
			[
				"preferelint",
				"Preferences: SublimeLinter Settings"
			],
			[
				"prefer",
				"Preferences: Settings"
			],
			[
				"Synct",
				"Set Syntax: C++"
			],
			[
				"syn++",
				"Set Syntax: C++"
			],
			[
				"goto",
				"SublimeLinter: Goto Error"
			],
			[
				"dle",
				"File: Delete"
			],
			[
				"forma",
				"Clang Format: Select Style"
			],
			[
				"clang",
				"Clang Format: Select Style"
			],
			[
				"brow",
				"Preferences: Browse Packages"
			],
			[
				"format",
				"Clang Format: Select Style"
			],
			[
				"disabl",
				"Package Control: Disable Package"
			],
			[
				"buildview",
				"Disable/Enable buildview for this window"
			],
			[
				"buildgl",
				"Build With: GL Build"
			],
			[
				"gl bu",
				"Build With: GL Build"
			],
			[
				"rean",
				"File: Rename"
			],
			[
				"sublimelint",
				"Preferences: SublimeLinter Settings"
			],
			[
				"sublimelin",
				"Preferences: SublimeLinter Settings"
			],
			[
				"syntaxc",
				"Set Syntax: C"
			],
			[
				"perma",
				"GitHubinator Permalink"
			],
			[
				"githu",
				"GitHubinator"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"pasca",
				"Convert Case: PascalCase"
			],
			[
				"cap",
				"Convert Case: PascalCase"
			],
			[
				"schem",
				"Schemr: List all schemes"
			],
			[
				"theme",
				"Themr: List themes"
			],
			[
				"scheme",
				"Schemr: List all schemes"
			],
			[
				"sche",
				"Schemr: List all schemes"
			],
			[
				"sch",
				"Schemr: List all schemes"
			],
			[
				"them",
				"Themr: List themes"
			],
			[
				"sett",
				"Preferences: Settings"
			],
			[
				"prefe",
				"Preferences: Settings"
			],
			[
				"dup",
				"File: Duplicate"
			],
			[
				"prett",
				"Preferences: JsPrettier Settings - Default"
			],
			[
				"pret",
				"Preferences: JsPrettier Settings - User"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"pre",
				"Preferences: JsPrettier Settings - User"
			],
			[
				"json",
				"Set Syntax: JSON"
			],
			[
				"flow",
				"GitHub Flavored Markdown: Preview"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"pl",
				"Package Control: List Packages"
			],
			[
				"lintthis",
				"SublimeLinter: Lint This View"
			],
			[
				"lint",
				"File: New View into File"
			],
			[
				"lintersett",
				"Preferences: SublimeLinter Settings"
			],
			[
				"linters",
				"Preferences: SublimeLinter Settings"
			],
			[
				"enablepack",
				"Package Control: Enable Package"
			],
			[
				"list linter",
				"SublimeLinter: Reload SublimeLinter and its Plugins"
			],
			[
				"sublimelintesett",
				"Preferences: SublimeLinter Settings"
			],
			[
				"sublimeLinter sett",
				"Preferences: SublimeLinter Settings"
			],
			[
				"lin",
				"SublimeLinter: Lint This View"
			],
			[
				"erro",
				"SublimeLinter: Goto Error"
			],
			[
				"go",
				"SublimeLinter: Goto Error"
			],
			[
				"unfo",
				"Code Folding: Unfold All"
			],
			[
				"unfor",
				"SublimeREPL: SBT for opened folder"
			],
			[
				"sublimlintset",
				"Preferences: SublimeLinter Settings"
			],
			[
				"pretter",
				"Preferences: JsPrettier Settings - User"
			],
			[
				"new view",
				"File: New View into File"
			],
			[
				"name",
				"File: Copy Name"
			],
			[
				"tag",
				"Tag: Remove Picked Tags in Document"
			],
			[
				"tag remove",
				"Tag: Remove Picked Tags in Document"
			],
			[
				"musta",
				"Set Syntax: HTML with mustaches"
			],
			[
				"conver",
				"Convert Case: dash-case"
			],
			[
				"reason",
				"Set Syntax: Reason"
			],
			[
				"dl",
				"File: Delete"
			],
			[
				"for",
				"Reason: Format file"
			],
			[
				"fork",
				"GitHub Flavored Markdown: Preview"
			]
		],
		"width": 496.0
	},
	"console":
	{
		"height": 340.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print('Please restart Sublime Text to finish installation')"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/jfriend/.wine/drive_c/goose64/src"
	],
	"file_history":
	[
		"/Users/jfriend/.wine/drive_c/goose64/src/main.c",
		"/Users/jfriend/.wine/drive_c/goose64/src/stage00.c",
		"/Users/jfriend/.wine/drive_c/goose64/src/ed64io_usb.c",
		"/Users/jfriend/.wine/drive_c/goose64/src/ed64io_usb.h",
		"/Users/jfriend/.wine/drive_c/goose64/src/ed64io_watchdog.c",
		"/Users/jfriend/.wine/drive_c/goose64/src/ed64io_fault.h",
		"/Users/jfriend/.wine/drive_c/goose64/src/ed64io_fault.c",
		"/Users/jfriend/.wine/drive_c/goose64/src/ed64io_watchdog.h",
		"/Users/jfriend/.wine/drive_c/goose64/src/n64compat.h",
		"/Users/jfriend/.wine/drive_c/goose64/src/ed64io.h",
		"/Users/jfriend/.wine/drive_c/goose64/src/sound.h",
		"/Users/jfriend/.wine/drive_c/goose64/src/constants.h",
		"/Users/jfriend/.wine/drive_c/goose64/src/disassemble_modern.sh",
		"/Users/jfriend/.wine/drive_c/goose64/src/segments.h",
		"/Users/jfriend/.wine/drive_c/goose64/src/spec",
		"/Users/jfriend/.wine/drive_c/goose64/src/graphic.c",
		"/Users/jfriend/.wine/drive_c/goose64/src/GNUmakefile",
		"/Users/jfriend/.wine/drive_c/goose64/src/common.makefile",
		"/Users/jfriend/.wine/drive_c/goose64/src/Makefile",
		"/Users/jfriend/.wine/drive_c/goose64/src/compile.bat",
		"/Users/jfriend/.wine/drive_c/goose64/src/goose64.sublime-project",
		"/Users/jfriend/.wine/drive_c/goose64/src/modern.makefile",
		"/Users/jfriend/.wine/drive_c/goose64/src/AUDIO.md",
		"/Users/jfriend/.wine/drive_c/goose64/src/build_modern.sh",
		"/Users/jfriend/.wine/drive_c/goose64/src/trace.c",
		"/Users/jfriend/.wine/drive_c/goose64/src/deploy.sh",
		"/Users/jfriend/.wine/drive_c/goose64/src/localdefs.makefile",
		"/Users/jfriend/.wine/drive_c/goose64/src/run_mupen.sh",
		"/Users/jfriend/.wine/drive_c/goose64/src/build_cached.sh",
		"/Users/jfriend/.wine/drive_c/goose64/src/build.sh",
		"/Users/jfriend/.wine/drive_c/goose64/src/ed64io_os_error.c",
		"/Users/jfriend/.wine/drive_c/goose64/src/ed64io_os_error.h",
		"/Users/jfriend/.wine/drive_c/goose64/src/glgoose.cpp",
		"/Users/jfriend/.wine/drive_c/goose64/src/models.c",
		"/Users/jfriend/.wine/drive_c/goose64/src/README.md",
		"/Users/jfriend/.wine/drive_c/goose64/src/.gitignore",
		"/Users/jfriend/.wine/drive_c/goose64/renderer.c",
		"/Users/jfriend/.wine/drive_c/goose64/goose64.sublime-project",
		"/Users/jfriend/.wine/drive_c/goose64/disassembly.txt",
		"/Users/jfriend/.wine/drive_c/goose64/sfx.h",
		"/Users/jfriend/.wine/drive_c/goose64/game.c",
		"/Users/jfriend/.wine/drive_c/goose64/constants.h",
		"/Users/jfriend/.wine/drive_c/goose64/renderer.h",
		"/Users/jfriend/.wine/drive_c/goose64/disassemble_modern.sh",
		"/Users/jfriend/.wine/drive_c/goose64/goose.out.dasm",
		"/Users/jfriend/.wine/drive_c/goose64/codesegment.o.dasm",
		"/Users/jfriend/.wine/drive_c/goose64/specminimal",
		"/Users/jfriend/.wine/drive_c/goose64/.depend",
		"/Users/jfriend/.wine/drive_c/goose64/localdefs.makefile",
		"/Users/jfriend/.wine/drive_c/goose64/stage00.c",
		"/Users/jfriend/.wine/drive_c/goose64/deploy.sh",
		"/Users/jfriend/.wine/drive_c/goose64/disassemble.sh",
		"/Users/jfriend/.wine/drive_c/goose64/Makefile",
		"/Users/jfriend/.wine/drive_c/goose64/ART.md",
		"/Users/jfriend/.wine/drive_c/goose64/mk000001.bat",
		"/Users/jfriend/.wine/drive_c/goose64/main_disasm.txt",
		"/Users/jfriend/.wine/drive_c/goose64/run_mupen.sh",
		"/Users/jfriend/.wine/drive_c/goose64/objdump.sh",
		"/Users/jfriend/.wine/drive_c/goose64/objdump.bat",
		"/Users/jfriend/.wine/drive_c/goose64/mem_heap.c",
		"/Users/jfriend/.wine/drive_c/goose64/mem_heap.h",
		"/Users/jfriend/.wine/drive_c/goose64/spec",
		"/Users/jfriend/.wine/drive_c/goose64/GNUmakefile",
		"/Users/jfriend/.wine/drive_c/goose64/compile.bat",
		"/Users/jfriend/.wine/drive_c/goose64/codesegment_disasm.txt",
		"/Users/jfriend/.wine/drive_c/goose64/sampling_profiler.c",
		"/Users/jfriend/code/m64p/build.sh",
		"/Users/jfriend/.wine/drive_c/goose64/trace.h",
		"/Users/jfriend/.wine/drive_c/goose64/trace.c",
		"/Users/jfriend/.wine/drive_c/goose64/sampling_profiler.h",
		"/Users/jfriend/.wine/drive_c/goose64/ed64io_fault.c",
		"/Users/jfriend/.wine/drive_c/goose64/codesegment_syms.txt",
		"/Users/jfriend/.wine/drive_c/goose64/build.sh",
		"/Users/jfriend/code/n64sdkmod/packages/root-compatibility-enviroment/etc/profile.d/n64-root.sh",
		"/Users/jfriend/.wine/drive_c/goose64/ed64io_usb.h",
		"/Users/jfriend/.wine/drive_c/goose64/ed64io_usb.c",
		"/Users/jfriend/.wine/drive_c/goose64/ed64io_os_error.c",
		"/Users/jfriend/.wine/drive_c/goose64/ed64io_os_error.h",
		"/Users/jfriend/.wine/drive_c/goose64/ed64io_fault.h",
		"/Users/jfriend/.wine/drive_c/moderngccdemo/libgultra_d_disasm.txt",
		"/Users/jfriend/.wine/drive_c/moderngccdemo/libgultra_disasm.txt",
		"/Users/jfriend/.wine/drive_c/goose64/graphic.c",
		"/Users/jfriend/.wine/drive_c/goose64/graphic.h",
		"/Users/jfriend/.wine/drive_c/goose64/main.c",
		"/Users/jfriend/.wine/drive_c/goose64/blender.sh",
		"/Users/jfriend/.wine/drive_c/goose64/export_animation.py",
		"/Users/jfriend/.wine/drive_c/goose64/export_character_model.py",
		"/Users/jfriend/.wine/drive_c/goose64/glgoose.cpp",
		"/Users/jfriend/.wine/drive_c/goose64/garden.blend",
		"/Users/jfriend/.wine/drive_c/goose64/garden.blend1",
		"/Users/jfriend/.wine/drive_c/goose64/glgoose",
		"/Users/jfriend/.wine/drive_c/goose64/university_bldg.h",
		"/Users/jfriend/.wine/drive_c/goose64/university_floor.h",
		"/Users/jfriend/.wine/drive_c/goose64/university_map.h",
		"/Users/jfriend/.wine/drive_c/goose64/university_map_collision.c",
		"/Users/jfriend/.wine/drive_c/goose64/university_map_collision.h",
		"/Users/jfriend/.wine/drive_c/goose64/university_map_graph.c",
		"/Users/jfriend/.wine/drive_c/goose64/university_map_graph.h",
		"/Users/jfriend/.wine/drive_c/goose64/goose64.out",
		"/Users/jfriend/.wine/drive_c/goose64/goose64glut/goose64glut.xcodeproj/project.xcworkspace/xcuserdata/jfriend.xcuserdatad/UserInterfaceState.xcuserstate",
		"/Users/jfriend/.wine/drive_c/goose64/models/Person.blend",
		"/Users/jfriend/.wine/drive_c/goose64/models/Person.blend1",
		"/Users/jfriend/.wine/drive_c/goose64/models/UniBldg.blend",
		"/Users/jfriend/.wine/drive_c/goose64/models/UniBldg.blend1",
		"/Users/jfriend/.wine/drive_c/goose64/models/UniFloor.blend",
		"/Users/jfriend/.wine/drive_c/goose64/buildcache.json",
		"/Users/jfriend/.wine/drive_c/goose64/garden_bldg.obj",
		"/Users/jfriend/.wine/drive_c/goose64/garden_floor.obj",
		"/Users/jfriend/.wine/drive_c/goose64/ground.mtl",
		"/Users/jfriend/.wine/drive_c/goose64/ground.obj",
		"/Users/jfriend/.wine/drive_c/goose64/lilypad.mtl",
		"/Users/jfriend/.wine/drive_c/goose64/lilypad.obj",
		"/Users/jfriend/.wine/drive_c/goose64/reed.mtl",
		"/Users/jfriend/.wine/drive_c/goose64/reed.obj",
		"/Users/jfriend/.wine/drive_c/goose64/rocks.mtl",
		"/Users/jfriend/.wine/drive_c/goose64/rocks.obj",
		"/Users/jfriend/.wine/drive_c/goose64/water.mtl",
		"/Users/jfriend/.wine/drive_c/goose64/water.obj",
		"/Users/jfriend/.wine/drive_c/goose64/watergrass.mtl",
		"/Users/jfriend/.wine/drive_c/goose64/watergrass.obj",
		"/Users/jfriend/.wine/drive_c/goose64/goose64glut/goose64glut.xcodeproj/project.pbxproj",
		"/Users/jfriend/.wine/drive_c/goose64/nodegraph/nodegraph.cpp",
		"/Users/jfriend/.wine/drive_c/goose64/character.c",
		"/Users/jfriend/.wine/drive_c/goose64/export_collision_mesh.py",
		"/Users/jfriend/.wine/drive_c/goose64/export_positions.py",
		"/Users/jfriend/.wine/drive_c/goose64/spatial_hash.py",
		"/Users/jfriend/.wine/drive_c/goose64/build_cached.sh",
		"/Users/jfriend/.wine/drive_c/goose64/ultratex.py"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 121.0,
		"where_history":
		[
			"*.c",
			"",
			"*.c",
			"",
			"*.c",
			"*.cpp,*.hpp",
			"",
			"*.c,*.h,*.py",
			"*.c,*.h",
			"",
			"*.c,*.h",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"makeDL00",
			"ed64StartWatchdogThread",
			"WireframeRenderMode",
			"sun_light",
			"amb_light",
			"twoCycleMode",
			"drawW",
			"draw",
			"renderModeSetting",
			"dynamicp",
			"loader64",
			"ed64PrintFuncImpl",
			"retrace",
			"osSyncPrintf",
			"_PrintfImplUSBAsync",
			"_Printf",
			"__MusIntSetPitch+1bc",
			"osSyncPrintf",
			"__MusIntSetPitch+1a4",
			"ed64PrintThreads",
			"ed64PrintThreads()",
			"ed64PrintThreads",
			"clearBreakpoint",
			"breakinst",
			"breakMsg",
			"BREAK_INSTRUCTION_MASK",
			"breakinst",
			"ed64DebuggerUsbListener",
			"walkFaultedThreads",
			"ED64IO_DEBUGGER",
			"ed64PrintThreads",
			"printThreads",
			"printThr",
			"lastValToWatch",
			"ed64StartWatchdogThread",
			"ED64CODEFILES",
			"totalUpdates",
			"retrace",
			"DBGPRINT",
			"watchdogThreadPri",
			"currentThreadOriginalPri",
			"startedwatchdogproc",
			"mainThreadPri",
			"watchdog",
			"fault",
			"faultMsgQ",
			"watchdogMsgQ",
			"valToWatchNew",
			"faultThreadPri",
			"faultThreadStack",
			"faultThreadPri",
			"faultMsgQ",
			"startedwatchdogproc",
			"faultproc",
			"currentThreadOriginalPri",
			"watchdogThread",
			"watchdogThreadPri",
			"CORELIBS",
			"NUAUDIOLIB",
			"CORELIBS",
			"NUAUDIOLIB",
			"ifdef OPTIMIZE",
			"seqPlaying",
			"sndHandle",
			"SeqPl",
			"CBUTT",
			"b1n12_2",
			"Stop",
			"\")",
			"L_C",
			"nuAuStlSeqPlayerPlay",
			"nuAuStlSeq",
			"nuAuStlSeqPlayerDataSet",
			"Seq",
			"MAX_SOUND_TYPE",
			"soundCheck",
			"SOUND_TE",
			"_songSegmentRomEnd",
			"offhonks",
			"honkSoundRange",
			"soundTypeRange",
			"sndNum",
			"sndNumber",
			"maxSoundType",
			"sndNumber",
			"MAX_SOUND_TYPE",
			"MAX_SOUND_NUMBER",
			"maxSoundType",
			"MAX_SOUND_TYPE",
			" % x",
			"sndNumber",
			"0",
			"debugPrintf",
			"sndHandle",
			"sndNumber",
			"nuAuStlSndPlayerPlay",
			"sndNumber",
			"nuAuStlSndPlayerPlay",
			"nuAuStlSndPlayerSndStop",
			"nuA",
			"$(TARGETS",
			"SOUND_TEST",
			"soundCheck",
			"SOUND_TEST",
			"CONSOLE_SHOW_SOUND",
			"SOUND_TEST",
			"LOG_TR",
			"A_BUTTON",
			"twoCycleMode",
			"nuAuStlSndPlayerSetSndPitch",
			"sndPitch",
			"sndHandle",
			"nuAuStlSndPlayerPlay",
			"sndHandle",
			"soundCheck",
			"ed64PrintfSync2",
			"SFX",
			"sfx",
			"SFX",
			"SFX_START",
			"ed64PrintfSync2",
			"_modelsSegmentRomStart",
			"DEBUGSTARTUP",
			"ed64PrintfSync2",
			"DEBUGPRINT",
			" done",
			"osCreateThread",
			"traceRCP"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"GARDEN",
			"garden",
			"GARDEN",
			"garden",
			"GARDEN",
			"garden",
			"0x0000",
			"HIGH_RESOLUTION_HALF_Y",
			"torso",
			"forearm",
			"forearm.l",
			"forearm.r",
			"forearm_r",
			"forearm_l",
			"hand_r",
			"forearm",
			"origin",
			"rotation.y",
			"rotationY"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "stage00.c",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42519,
						"regions":
						{
						},
						"selection":
						[
							[
								72,
								72
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "goose64.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1686,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1685,
										1686
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										0,
										1
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/PackageDev/Package/Sublime Text Project/Sublime Text Project.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 44.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 517.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 407.0
	},
	"output.aaa_package_dev":
	{
		"height": 116.0
	},
	"output.exec":
	{
		"height": 382.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.package_dev":
	{
		"height": 116.0
	},
	"output.unsaved_changes":
	{
		"height": 138.0
	},
	"pinned_build_system": "",
	"project": "goose64.sublime-project",
	"replace":
	{
		"height": 56.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"stage",
				"stage00.c"
			],
			[
				"main",
				"main.c"
			],
			[
				"dis",
				"disassemble_modern.sh"
			],
			[
				"const",
				"constants.h"
			],
			[
				"n64compat",
				"n64compat.h"
			],
			[
				"comp",
				"compile.bat"
			],
			[
				"make",
				"Makefile"
			],
			[
				"depl",
				"deploy.sh"
			],
			[
				"sta",
				"stage00.c"
			],
			[
				"ed64io",
				"ed64io.h"
			],
			[
				"stag",
				"stage00.c"
			],
			[
				"read",
				"README.md"
			],
			[
				"watchdo",
				"ed64io_watchdog.c"
			],
			[
				"watch",
				"watchdog.c"
			],
			[
				"ed6us",
				"ed64io_usb.h"
			],
			[
				"ed64usb",
				"ed64io_usb.c"
			],
			[
				"wat",
				"watchdog.c"
			],
			[
				"edfau",
				"ed64io_fault.c"
			],
			[
				"fual",
				"ed64io_fault.h"
			],
			[
				"faul",
				"ed64io_fault.c"
			],
			[
				"spec",
				"spec"
			],
			[
				"comm",
				"common.makefile"
			],
			[
				"sound",
				"sound.h"
			],
			[
				"sf",
				"sfx.h"
			],
			[
				"a",
				"AUDIO.md"
			],
			[
				"aud",
				"AUDIO.md"
			],
			[
				"buich",
				"build_cached.sh"
			],
			[
				"buildcach",
				"build_cached.sh"
			],
			[
				"mae",
				"Makefile"
			],
			[
				"build",
				"build.sh"
			],
			[
				"spe",
				"spec"
			],
			[
				".md",
				"AUDIO.md"
			],
			[
				"giti",
				".gitignore"
			],
			[
				"dasm",
				"goose.out.dasm"
			],
			[
				"",
				"common.makefile"
			],
			[
				"go",
				"goose.out.dasm"
			],
			[
				"gn",
				"GNUmakefile"
			],
			[
				"modern",
				"modern.makefile"
			],
			[
				"gnu",
				"GNUmakefile"
			],
			[
				"commo",
				"common.makefile"
			],
			[
				"goose.outd",
				"goose.out.dasm"
			],
			[
				"disass",
				"disassemble_modern.sh"
			],
			[
				"ed64fa",
				"ed64io_fault.c"
			],
			[
				"buildmo",
				"build_modern.sh"
			],
			[
				"buildcac",
				"build_cached.sh"
			],
			[
				"mainc",
				"main.c"
			],
			[
				"buildca",
				"build_cached.sh"
			],
			[
				"buch",
				"build_cached.sh"
			],
			[
				"render",
				"renderer.h"
			],
			[
				"gnuma",
				"GNUmakefile"
			],
			[
				"moden",
				"disassemble_modern.sh"
			],
			[
				"disa",
				"disassemble_modern.sh"
			],
			[
				"cons",
				"constants.h"
			],
			[
				"depen",
				".depend"
			],
			[
				"depe",
				".depend"
			],
			[
				"consta",
				"constants.h"
			],
			[
				"buidmo",
				"build_modern.sh"
			],
			[
				"rende",
				"renderer.c"
			],
			[
				"gamec",
				"game.c"
			],
			[
				"constants.h",
				"constants.h"
			],
			[
				"ream",
				"README.md"
			],
			[
				"buimod",
				"build_modern.sh"
			],
			[
				"mak",
				"common.makefile"
			],
			[
				"lo",
				"localdefs"
			],
			[
				"gl",
				"glgoose.cpp"
			],
			[
				"art",
				"ART.md"
			],
			[
				"rea",
				"README.md"
			],
			[
				"ma",
				"Makefile"
			],
			[
				"runm",
				"run_mupen.sh"
			],
			[
				"maek",
				"Makefile"
			],
			[
				"edos",
				"ed64io_os_error.h"
			],
			[
				"bui",
				"build.sh"
			],
			[
				"buca",
				"build_cached.sh"
			],
			[
				"build_ca",
				"build_cached.sh"
			],
			[
				"GN",
				"GNUmakefile"
			],
			[
				"compile.bat",
				"compile.bat"
			],
			[
				"codes",
				"codesegment_disasm.txt"
			],
			[
				"objdump.bat",
				"objdump.bat"
			],
			[
				"co",
				"codesegment_disasm.txt"
			],
			[
				"obj",
				"objdump.sh"
			],
			[
				"disas",
				"disassembly.txt"
			],
			[
				"mode",
				"models.c"
			],
			[
				"buil",
				"build.sh"
			],
			[
				"run",
				"run_mupen.sh"
			],
			[
				"makef",
				"Makefile"
			],
			[
				"sp",
				"spec"
			],
			[
				"mem",
				"mem_heap.h"
			],
			[
				"maindis",
				"main_disasm.txt"
			],
			[
				"edfaul",
				"ed64io_fault.c"
			],
			[
				"trace",
				"trace.h"
			],
			[
				"profi",
				"profiler.c"
			],
			[
				"usb",
				"ed64io_usb.h"
			],
			[
				"edusb",
				"ed64io_usb.c"
			],
			[
				"edus",
				"ed64io_usb.c"
			],
			[
				"graph",
				"graphic.c"
			],
			[
				"blen",
				"blender.sh"
			],
			[
				"expoan",
				"export_animation.py"
			],
			[
				"expocha",
				"export_character_model.py"
			],
			[
				"ren",
				"renderer.h"
			],
			[
				"buid",
				"build.sh"
			],
			[
				"ed64fau",
				"ed64io_fault.h"
			],
			[
				"build mo",
				"build_modern.sh"
			],
			[
				"buildmod",
				"build_modern.sh"
			],
			[
				"frus",
				"frustum.c"
			],
			[
				"ultra",
				"ultratex.py"
			],
			[
				"stage00",
				"stage00.c"
			],
			[
				"stag0",
				"stage00.c"
			],
			[
				"eve",
				"ed64io_everdrive.h"
			],
			[
				"everdh",
				"ed64io_everdrive.h"
			],
			[
				"rendere",
				"renderer.c"
			],
			[
				"trach",
				"trace.h"
			],
			[
				"grap",
				"graphic.c"
			],
			[
				"renh",
				"renderer.h"
			],
			[
				"readme",
				"README.md"
			],
			[
				"bush",
				"bush.h"
			],
			[
				"univeco",
				"university_map_collision.c"
			],
			[
				"coll",
				"collision.c"
			],
			[
				"glc",
				"glgoose.cpp"
			],
			[
				"git",
				".gitignore"
			],
			[
				"grpah",
				"graphic.c"
			],
			[
				"soun",
				"sound.h"
			],
			[
				"mainh",
				"main.h"
			],
			[
				"get",
				"get_changed_files.py"
			],
			[
				"honktest",
				"honktest1spr.h"
			],
			[
				"test",
				"testspr.h"
			],
			[
				"wave",
				"wavefront64/wavefront64.lua"
			],
			[
				"honk3",
				"honk3spr.h"
			],
			[
				"honk2",
				"honk2spr.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/code/posts/posts.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 34.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Renderer_calcIntersecting",
				"Renderer_calcIntersecting"
			],
			[
				"Time",
				"CUR_TIME_MS"
			],
			[
				"ed64StartWatchdogThread",
				"ed64StartWatchdogThread"
			],
			[
				"ed64PrintFuncImpl",
				"ed64PrintFuncImpl"
			],
			[
				"Soundty",
				"SoundType"
			],
			[
				"rand",
				"RAND"
			],
			[
				"RAND",
				"RAND"
			],
			[
				"SONG",
				"SONG_END"
			],
			[
				"gfxInit",
				"gfxInit"
			],
			[
				"debug",
				"DEBUGPRINT"
			],
			[
				"Trace_addEvent",
				"Trace_addEvent"
			],
			[
				"tracead",
				"Trace_addEvent"
			],
			[
				"trace",
				"Trace_start"
			],
			[
				"initStage00",
				"initStage00"
			],
			[
				"game",
				"Game_init"
			],
			[
				"ed64RegisterOSErrorHandler",
				"ed64RegisterOSErrorHandler"
			],
			[
				"ed64PrintStackTrace",
				"ed64PrintStackTrace"
			],
			[
				"EXTERN_SEGMENT_WITH_BSS",
				"EXTERN_SEGMENT_WITH_BSS"
			],
			[
				"PerfLogger_logChunk",
				"PerfLogger_logChunk"
			],
			[
				"SamplingProfiler_startThread",
				"SamplingProfiler_startThread"
			],
			[
				"Trace_clear",
				"Trace_clear"
			],
			[
				"regDesc_t",
				"regDesc_t"
			],
			[
				"inva",
				"invariant"
			],
			[
				"ED64IO_FAULT_STACKSIZE",
				"ED64IO_FAULT_STACKSIZE"
			],
			[
				"SCREEN_HT",
				"SCREEN_HT"
			],
			[
				"assert",
				"ed64Assert"
			],
			[
				"invar",
				"invariant"
			],
			[
				"characini",
				"Character_init"
			],
			[
				"char",
				"Character"
			],
			[
				"upda",
				"updateGame00"
			],
			[
				"Renderer_sortVisibleObjects",
				"Renderer_sortVisibleObjects"
			],
			[
				"Renderer_isCloser",
				"Renderer_isCloserBySeparatingPlane"
			],
			[
				"Renderer_getSeparatingPlane",
				"Renderer_getSeparatingPlane"
			],
			[
				"update",
				"updateGame00"
			],
			[
				"Plane_distance",
				"Plane_distance"
			],
			[
				"render",
				"Renderer_cullVisibility"
			],
			[
				"rendere",
				"Renderer_cullVisibility"
			],
			[
				"ed64",
				"ed64PrintfSync2"
			],
			[
				"ed64SendFaultMessage",
				"ed64SendFaultMessage"
			],
			[
				"Renderer_isBackgroundGameObject",
				"Renderer_isBackgroundGameObject"
			],
			[
				"gfxClearCfb",
				"gfxClearCfb"
			],
			[
				"invariant",
				"invariant"
			],
			[
				"isback",
				"Renderer_isBackgroundGameObject"
			],
			[
				"Renderer_isZBufferedGameObject",
				"Renderer_isZBufferedGameObject"
			],
			[
				"renderer",
				"Renderer_cullVisibility"
			],
			[
				"RendererSortDistance",
				"RendererSortDistance"
			],
			[
				"Vec3d_directionTo",
				"Vec3d_directionTo"
			],
			[
				"MEM_HEAP_SIZE",
				"MEM_HEAP_SIZE"
			],
			[
				"gameob",
				"GameObject"
			],
			[
				"zbu",
				"Renderer_isZBufferedGameObject"
			],
			[
				"aabb",
				"AABB_fromSphere"
			],
			[
				"AABB",
				"AABB"
			],
			[
				"getModelDisplayList",
				"getModelDisplayList"
			],
			[
				"G_RM_AA_ZUPD_OPA_SURF",
				"G_RM_AA_ZUPD_OPA_SURF"
			],
			[
				"updateGame00",
				"updateGame00"
			],
			[
				"main",
				"main"
			],
			[
				"MIN",
				"MIN"
			],
			[
				"camera",
				"Game_updateCamera"
			],
			[
				"Rand",
				"RAND"
			],
			[
				"Game_getObjCenter",
				"Game_getObjCenter"
			],
			[
				"padBinaryLeft",
				"padBinaryLeft"
			],
			[
				"draww",
				"drawWorldObjects"
			],
			[
				"drawW",
				"drawWorldObjects"
			],
			[
				"Sprite_frameCycle",
				"Sprite_frameCycle"
			],
			[
				"fram",
				"Sprite_frameCycle"
			],
			[
				"Matr",
				"Matrix4"
			],
			[
				"Matrix",
				"Matrix4"
			],
			[
				"player",
				"Player_move"
			],
			[
				"E",
				"Euler"
			],
			[
				"animSta",
				"AnimationState"
			],
			[
				"Dynamic",
				"Dynamic"
			],
			[
				"gameo",
				"GameObject"
			],
			[
				"Gameob",
				"GameObject_init"
			],
			[
				"Renderer_cullVisibility",
				"Renderer_cullVisibility"
			],
			[
				"updagame",
				"updateGame00"
			],
			[
				"stage0",
				"stage00"
			],
			[
				"makeDL00",
				"makeDL00"
			],
			[
				"Game_update",
				"Game_update"
			],
			[
				"chracini",
				"Character_init"
			],
			[
				"getmo",
				"getMeshForModelType"
			],
			[
				"logtr",
				"logTraceChunk"
			],
			[
				"renderso",
				"Renderer_sortVisibleObjects"
			],
			[
				"loadBMP_custom",
				"loadBMP_custom"
			],
			[
				"update00",
				"updateGame00"
			],
			[
				"make",
				"makeDL00"
			],
			[
				"rendererc",
				"Renderer_cullVisibility"
			],
			[
				"ma",
				"makeDL00"
			],
			[
				"maked",
				"makeDL00"
			],
			[
				"HIGH_RESOLUTION",
				"HIGH_RESOLUTION"
			],
			[
				"makedl",
				"makeDL00"
			],
			[
				"getCen",
				"GetCenter"
			],
			[
				"model",
				"ModelProperties"
			],
			[
				"physb",
				"PhysBody"
			],
			[
				"ImGuiInputTextFlags",
				"ImGuiInputTextFlags_"
			],
			[
				"inputFlo",
				"InputFloat"
			],
			[
				"phys",
				"PhysBody"
			],
			[
				"Gameo",
				"GameObject"
			],
			[
				"InputF",
				"InputFloat3"
			],
			[
				"ImGuiInputTextFlags_",
				"ImGuiInputTextFlags_"
			],
			[
				"InputFloat3",
				"InputFloat3"
			],
			[
				"inputflo",
				"InputFloat3"
			],
			[
				"inputfl",
				"InputFloat"
			],
			[
				"InputFloat",
				"InputFloat"
			],
			[
				"GameObj",
				"GameObject"
			],
			[
				"EulerDe",
				"EulerDegrees"
			],
			[
				"FLT_EPSILON",
				"FLT_EPSILON"
			],
			[
				"rayinter",
				"Game_rayIntersectsSphere"
			],
			[
				"gameray",
				"Game_rayIntersectsSphere"
			],
			[
				"Vec3d",
				"VEC3D_H"
			],
			[
				"vec3d",
				"Vec3d"
			],
			[
				"Game_getIntersectingObject",
				"Game_getIntersectingObject"
			],
			[
				"RaycastTraceEvent",
				"RaycastTraceEvent"
			],
			[
				"Game_traceRaycast",
				"Game_traceRaycast"
			],
			[
				"Game_rayIntersectsSphere",
				"Game_rayIntersectsSphere"
			],
			[
				"vec3ddir",
				"Vec3d_directionTo"
			],
			[
				"Vec3d_init",
				"Vec3d_init"
			],
			[
				"cahraccanse",
				"Character_canSeeItem"
			],
			[
				"intersec",
				"Game_rayIntersectsSphere"
			],
			[
				"ImGui_ImplGLUT_InstallFuncs",
				"ImGui_ImplGLUT_InstallFuncs"
			],
			[
				"AnimatioFra",
				"AnimationFrame_lerp"
			],
			[
				"AnimationFrame_lerp",
				"AnimationFrame_lerp"
			],
			[
				"characmove",
				"Character_moveTowards"
			],
			[
				"Character_moveTowards",
				"Character_moveTowards"
			],
			[
				"charac",
				"Character"
			],
			[
				"gameupdate",
				"Game_update"
			],
			[
				"AnimationState_init",
				"AnimationState_init"
			],
			[
				"MAX_ANIM_MESH_PARTS",
				"MAX_ANIM_MESH_PARTS"
			],
			[
				"Anim",
				"AnimationFrame"
			]
		],
		"width": 600.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 342.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
